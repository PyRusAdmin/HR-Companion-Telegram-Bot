# -*- coding: utf-8 -*-
from aiogram import F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery
from aiogram.types import Message

from keyboards.keyboards import back
from states.states import BotContentEditStates
from system.system import router, ADMIN_USER_ID
from system.working_with_files import save_bot_info, load_bot_info, load_questions_map, save_questions_map
import json
import os
from uuid import uuid4
from aiogram.types import ReplyKeyboardRemove
from system.system import bot, GROUP_CHAT_ID  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å GROUP_CHAT_ID


@router.callback_query(F.data == "anonymous_question_handler")
async def anonymous_question_handler(query: CallbackQuery, state: FSMContext) -> None:
    """‚ùì –ê–Ω–æ–Ω–∏–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å"""

    # –°–æ–æ–±—â–µ–Ω–∏–µ —Å–∞–º–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await query.message.answer(
        text=load_bot_info(messages="media/messages/anonymous_question_handler.json"),
        reply_markup=back()
    )
    await state.set_state(BotContentEditStates.waiting_for_anonymous_question)
    await query.answer()  # –∑–∞–∫—Ä—ã–≤–∞–µ–º "—á–∞—Å–∏–∫–∏"


@router.message(BotContentEditStates.waiting_for_anonymous_question)
async def receive_anonymous_question(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ –≥—Ä—É–ø–ø—É"""
    question_text = message.text.strip()
    if not question_text:
        await message.answer("–í–æ–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –≤–æ–ø—Ä–æ—Å–∞
    question_id = f"Q{str(uuid4().hex)[:8].upper()}"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å: –≤–æ–ø—Ä–æ—Å_id ‚Üí user_id + —Ç–µ–∫—Å—Ç
    questions_map = load_questions_map()
    questions_map[question_id] = {
        "user_id": message.from_user.id,
        "question_text": question_text
    }
    save_questions_map(questions_map)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É
    group_message = await bot.send_message(
        chat_id=GROUP_CHAT_ID,
        text=f"‚ùì <b>–ê–Ω–æ–Ω–∏–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å</b> ({question_id}):\n\n{question_text}",
        parse_mode="HTML"
    )

    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —Å–æ—Ö—Ä–∞–Ω—è–µ–º message_id –≤ –≥—Ä—É–ø–ø–µ –¥–ª—è –±—É–¥—É—â–∏—Ö —Å—Å—ã–ª–æ–∫
    # (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ –ø–æ–ª–µ–∑–Ω–æ –ø—Ä–∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–∏)

    await message.answer("–í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É. –û—Ç–≤–µ—Ç –ø—Ä–∏–¥—ë—Ç —Å—é–¥–∞, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä –æ—Ç–≤–µ—Ç–∏—Ç.")
    await state.clear()


@router.message(F.chat.id == GROUP_CHAT_ID, F.reply_to_message)
async def handle_manager_reply(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤ –≥—Ä—É–ø–ø–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å"""
    reply_msg = message.reply_to_message
    if not reply_msg or not reply_msg.text:
        return

    # –ò—â–µ–º question_id –≤ —Ç–µ–∫—Å—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "‚ùì –ê–Ω–æ–Ω–∏–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å (Q123ABCD): ...")
    text = reply_msg.text
    if "–ê–Ω–æ–Ω–∏–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å (" not in text:
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID
    try:
        start = text.find("(") + 1
        end = text.find(")")
        question_id = text[start:end]
    except:
        return

    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    questions_map = load_questions_map()
    if question_id not in questions_map:
        return

    user_id = questions_map[question_id]["user_id"]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        await bot.send_message(
            chat_id=user_id,
            text=f"üì¨ <b>–û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –∞–Ω–æ–Ω–∏–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å:</b>\n\n{message.text}",
            parse_mode="HTML"
        )
        # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —É–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –∫–∞—Ä—Ç—ã (–∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏)
        # del questions_map[question_id]
        # save_questions_map(questions_map)
    except Exception as e:
        await bot.send_message(GROUP_CHAT_ID, f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /edit_anonymous_question_handler (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
@router.message(Command("edit_anonymous_question_handler"))
async def edit_anonymous_question_handler(message: Message, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: ‚ùì –ê–Ω–æ–Ω–∏–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å"""
    if message.from_user.id not in ADMIN_USER_ID:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É—è —Ä–∞–∑–º–µ—Ç–∫—É HTML.")
    await state.set_state(BotContentEditStates.edit_anonymous_question_handler)


@router.message(BotContentEditStates.edit_anonymous_question_handler)
async def update_anonymous_question_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –∞–¥–º–∏–Ω–∞, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é)"""
    save_bot_info(
        message.html_text, file_path='media/messages/anonymous_question_handler.json'
    )  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ JSON
    await message.reply("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
    await state.clear()


def register_handlers_anonymous_question_handler() -> None:
    router.callback_query.register(anonymous_question_handler)  # ‚ùì –ê–Ω–æ–Ω–∏–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å
    router.message.register(edit_anonymous_question_handler)  # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: ‚ùì –ê–Ω–æ–Ω–∏–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å

    router.message.register(handle_manager_reply)
